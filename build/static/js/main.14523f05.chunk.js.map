{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["pictures","fileName","relation","name","Alert","props","elevation","variant","App","handleClose","event","reason","setState","isSuccessOpen","isWrongOpen","state","cards","hint","winner","0","1","2","3","this","getValues","setCards","setWinningCard","arr","i","length","j","Math","floor","random","temp","newPics","shufflePics","slice","winningCard","card","className","map","style","opacity","onMouseEnter","onMouseLeave","onClick","checkWinState","key","role","aria-label","backgroundImage","Tooltip","title","Button","background","fontSize","startIcon","color","getHint","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","severity","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mXASMA,EAAW,CACf,CACEC,SAAW,UACXC,SAAW,UACXC,KAAO,UAET,CACEF,SAAW,cACXC,SAAW,aACXC,KAAO,SAET,CACEF,SAAW,cACXC,SAAW,aACXC,KAAO,SAET,CACEF,SAAW,SACXC,SAAW,QACXC,KAAO,SAET,CACEF,SAAW,SACXC,SAAW,QACXC,KAAO,OAET,CACEF,SAAW,SACXC,SAAW,QACXC,KAAO,WAET,CACEF,SAAW,UACXC,SAAW,SACXC,KAAO,QAET,CACEF,SAAW,UACXC,SAAW,SACXC,KAAO,QAET,CACEF,SAAW,SACXC,SAAW,SACXC,KAAO,UAIX,SAASC,EAAMC,GACb,OAAO,kBAAC,IAAD,eAAUC,UAAW,EAAGC,QAAQ,UAAaF,I,IAEjCG,E,kDACnB,WAAYH,GAAQ,IAAD,8BACjB,cAAMA,IA2DRI,YAAc,SAACC,EAAOC,GACL,cAAXA,IAIJ,EAAKC,SAAS,CAACC,eAAe,IAC9B,EAAKD,SAAS,CAACE,aAAa,MAhE5B,EAAKC,MAAQ,CACXZ,KAAM,GACNa,MAAO,GACPC,KAAM,GACNC,OAAQ,GACRL,eAAe,EACfC,aAAa,EACbK,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,GAZY,E,gEAiBjBC,KAAKC,c,4JAICD,KAAKE,W,OACXF,KAAKG,iBACLH,KAAKX,SAAS,CAACK,KAAM,KACrBM,KAAKX,SAAS,CAACE,aAAa,I,wIAGlBa,GACV,IAAI,IAAIC,EAAID,EAAIE,OAAS,EAAGD,EAAI,EAAGA,IAAI,CACrC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,SAAWL,GAC/BM,EAAOP,EAAIC,GACjBD,EAAIC,GAAKD,EAAIG,GACbH,EAAIG,GAAKI,EAEX,OAAOP,I,mJAIDQ,EAAUZ,KAAKa,YAAYpC,GAC3BgB,EAAQmB,EAAQE,MAAM,EAAE,GAC9Bd,KAAKX,SAAS,CAACI,MAAOA,I,6IAItB,IAAMsB,EAAcf,KAAKR,MAAMC,MAAMe,KAAKC,MAAsB,EAAhBD,KAAKE,WAClDK,EAAYnC,MAAQoB,KAAKR,MAAMZ,KAChCoB,KAAKG,kBAELH,KAAKX,SAAS,CAACM,OAAQoB,IACvBf,KAAKX,SAAS,CAACT,KAAMmC,EAAYnC,U,gCAK/BoB,KAAKR,MAAMG,QAGfK,KAAKX,SAAS,CAACK,KAAMM,KAAKR,MAAMG,OAAOhB,a,oCAY3BqC,GACTA,GAAQhB,KAAKR,MAAMG,QACpBK,KAAKX,SAAS,CAACE,aAAa,IAC5BS,KAAKX,SAAS,CAACC,eAAe,IAC9BU,KAAKC,cAGLD,KAAKX,SAAS,CAACC,eAAe,IAC9BU,KAAKX,SAAS,CAACE,aAAa,O,+BAItB,IAAD,aACiDS,KAAKR,MAAtDZ,EADA,EACAA,KAAMa,EADN,EACMA,MAAOC,EADb,EACaA,KAAMJ,EADnB,EACmBA,cAAeC,EADlC,EACkCA,YACzC,OACE,yBAAK0B,UAAU,QACf,yBAAKA,UAAU,WACb,yBAAKA,UAAU,eAAf,6BAAuD,0BAAMA,UAAU,QAAQrC,IAC9Ec,GAAS,sCAAYd,EAAZ,cAA4B,0BAAMqC,UAAU,QAAQvB,KAEhE,yBAAKuB,UAAU,QACZxB,EAAMyB,KAAI,SAACF,EAAKX,GAAN,OACX,uBAAGc,MAAO,CAACC,SAA2B,IAAlB,EAAK5B,MAAMa,GAAc,MAAQ,KAAMgB,aAAc,kBAAM,EAAKhC,SAAL,eAAgBgB,GAAI,KAAQiB,aAAc,kBAAM,EAAKjC,SAAL,eAAgBgB,GAAI,KAASkB,QAAS,WAAO,EAAKC,cAAcR,IAAQS,IAAKpB,EAAGY,UAAU,UACvN,0BAAMS,KAAK,MAAMC,aAAW,uCAC1B,yBAAKA,aAAW,sCAAsCR,MAAO,CAACS,gBAAgB,iBAAD,OAAmBZ,EAAKtC,SAAxB,mBAKnF,yBAAKuC,UAAY,WACf,kBAACY,EAAA,EAAD,CAASC,MAAO,oFACd,kBAACC,EAAA,EAAD,CAAQZ,OAAK,GAAIa,WAAY,UAAWC,SAAU,QAArC,yBAAsD,sBAAtD,8BAA2F,QAA3F,GAAqGC,UAAW,kBAAC,IAAD,CAAYf,MAAK,aAAIc,SAAU,QAAd,WAA+B,wBAA4BN,aAAW,uDAAuDJ,QAAS,WAAQ,EAAKtB,aAAgBjB,QAAQ,YAAYmD,MAAM,WAA3U,mBAEF,kBAACN,EAAA,EAAD,CAASC,MAAO,wDAA8BlD,IAC5C,kBAACmD,EAAA,EAAD,CAAQZ,OAAK,GAAIa,WAAY,UAAWC,SAAU,QAArC,yBAAsD,sBAAtD,8BAA2F,QAA3F,GAAqGC,UAAW,kBAAC,IAAD,CAAaf,MAAK,aAAIc,SAAU,QAAd,WAA+B,wBAA4BN,aAAW,8CAA8CJ,QAAS,WAAM,EAAKa,WAAcpD,QAAQ,YAAYmD,MAAM,WAA/T,uBAGJ,kBAACE,EAAA,EAAD,CAAUC,aAAc,CAAEC,SAAU,MAAOC,WAAY,UAAYC,KAAMnD,EAAeoD,iBAAkB,IAAMC,QAAS3C,KAAKd,aAC5H,kBAAC,EAAD,CAAOiC,MAAK,aAAIc,SAAU,QAAd,WAA+B,sBAAuBU,QAAS3C,KAAKd,YAAa0D,SAAS,WAAtG,oDAIF,kBAACP,EAAA,EAAD,CAAUC,aAAc,CAAEC,SAAU,MAAOC,WAAY,UAAYC,KAAMlD,EAAamD,iBAAkB,IAAMC,QAAS3C,KAAKd,aAC1H,kBAAC,EAAD,CAAOiC,MAAK,aAAIc,SAAU,QAAd,WAA+B,sBAAuBU,QAAS3C,KAAKd,YAAa0D,SAAS,SAAtG,0C,GAjHyBC,IAAMC,WChDnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.14523f05.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from '@material-ui/core'\nimport Tooltip from '@material-ui/core/Tooltip';\nimport RotateLeft from '@material-ui/icons/RotateLeft';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport './App.css';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\n\nconst pictures = [\n  {\n    fileName : \"brother\",\n    relation : \"brother\",\n    name : \"Trevor\"\n  },\n  {\n    fileName : \"grandchild1\",\n    relation : \"grandchild\",\n    name : \"Marry\"\n  },\n  {\n    fileName : \"grandchild2\",\n    relation : \"grandchild\",\n    name : \"Billy\"\n  },\n  {\n    fileName : \"neice1\",\n    relation : \"neice\",\n    name : \"Katie\"\n  },\n  {\n    fileName : \"neice2\",\n    relation : \"neice\",\n    name : \"Liz\"\n  },\n  {\n    fileName : \"neice3\",\n    relation : \"neice\",\n    name : \"Katrina\"\n  },\n  {\n    fileName : \"nephew1\",\n    relation : \"nephew\",\n    name : \"Nate\"\n  },\n  {\n    fileName : \"nephew2\",\n    relation : \"nephew\",\n    name : \"Mark\"\n  },\n  {\n    fileName : \"sister\",\n    relation : \"sister\",\n    name : \"Kathy\"\n  },\n]\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"\",\n      cards: [],\n      hint: \"\",\n      winner: {},\n      isSuccessOpen: false,\n      isWrongOpen: false,\n      0: false,\n      1: false,\n      2: false,\n      3: false\n    }\n  }\n\n  componentDidMount() {\n    this.getValues();\n  }\n\n  async getValues(){\n    await this.setCards();\n    this.setWinningCard();\n    this.setState({hint: \"\"});\n    this.setState({isWrongOpen: false});\n  }\n\n  shufflePics(arr) {\n    for(let i = arr.length - 1; i > 0; i--){\n      const j = Math.floor(Math.random() * i)\n      const temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n    }\n    return arr;\n  }\n\n  async setCards(){\n    const newPics = this.shufflePics(pictures);\n    const cards = newPics.slice(0,4);\n    this.setState({cards: cards});\n  }\n\n  setWinningCard(){\n    const winningCard = this.state.cards[Math.floor(Math.random() * 4)];\n    if(winningCard.name == this.state.name){\n      this.setWinningCard();\n    }else{\n      this.setState({winner: winningCard});\n      this.setState({name: winningCard.name});\n    }\n  }\n\n  getHint(){\n    if(!this.state.winner){\n      return;\n    }\n    this.setState({hint: this.state.winner.relation});\n  }\n\n  handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    this.setState({isSuccessOpen: false});\n    this.setState({isWrongOpen: false});\n  };\n\n  checkWinState(card){\n    if(card == this.state.winner){\n      this.setState({isWrongOpen: false});\n      this.setState({isSuccessOpen: true});\n      this.getValues();\n    }\n    else{\n      this.setState({isSuccessOpen: false});\n      this.setState({isWrongOpen: true});\n    }\n  }\n\n  render() {\n    const {name, cards, hint, isSuccessOpen, isWrongOpen} = this.state;\n    return (\n      <div className=\"Home\">\n      <div className=\"headers\">\n        <div className=\"target-name\">Click on the picture of : <span className=\"blue\">{name}</span></div>\n        {hint && (<div>Hint! {name} is your : <span className=\"blue\">{hint}</span></div>)}\n      </div>\n      <div className=\"pics\">\n        {cards.map((card,i) =>  \n        <a style={{opacity: this.state[i] === true ? \"0.5\" : \"1\"}} onMouseEnter={() => this.setState({[i]: true})} onMouseLeave={() => this.setState({[i]: false})} onClick={() => {this.checkWinState(card)}} key={i} className=\"shadow\">\n          <span role=\"img\" aria-label=\"This is an image of a family member\">\n            <img aria-label=\"This is an image of a family member\" style={{backgroundImage: `url(\"./photos/${card.fileName}.jpg\")`}} ></img>\n          </span>\n        </a>\n      )}\n      </div>\n      <div className = \"buttons\">\n        <Tooltip title={<p>Click to reset the images and the family member name</p>}>\n          <Button style={{ background: '#002f5b', fontSize: '22px', fontSize:'calc(14px + 1.2vw)', textTransform: 'none' }} startIcon={<RotateLeft style={{ fontSize: '22px', fontSize:'calc(14px + 1.2vw)' }} />} aria-label=\"Click to reset the images and the family member name\" onClick={() => { this.getValues(); }} variant=\"contained\" color=\"Primary\">Click to Reset</Button>\n        </Tooltip >\n        <Tooltip title={<p>Click to see a hint about {name}</p>}>\n          <Button style={{ background: '#002f5b', fontSize: '22px', fontSize:'calc(14px + 1.2vw)', textTransform: 'none' }} startIcon={<HelpOutline style={{ fontSize: '22px', fontSize:'calc(14px + 1.2vw)' }} />} aria-label=\"click to see a hint about the family member\" onClick={()=> {this.getHint(); }} variant=\"contained\" color=\"Primary\">Click to See Hint</Button>\n        </Tooltip>\n      </div>\n      <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }} open={isSuccessOpen} autoHideDuration={4000} onClose={this.handleClose}>\n        <Alert style={{ fontSize: '22px', fontSize:'calc(14px + 0.6vw)'}} onClose={this.handleClose} severity=\"success\">\n          Congratulations! You picked the correct option!\n        </Alert>\n      </Snackbar>\n      <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }} open={isWrongOpen} autoHideDuration={4000} onClose={this.handleClose}>\n        <Alert style={{ fontSize: '22px', fontSize:'calc(14px + 0.6vw)'}} onClose={this.handleClose} severity=\"error\">\n          Sorry! That was the wrong option\n        </Alert>\n      </Snackbar>\n    </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}